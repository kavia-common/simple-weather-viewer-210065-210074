{"is_source_file": true, "format": "JavaScript (React/Jest test file)", "description": "This file contains test cases for GxP compliance verification of a React frontend application, focusing on audit trail, input validation, and access control placeholders. It uses React Testing Library and Jest to simulate user interactions and validate audit log entries and UI behavior.", "external_files": ["../App", "../utils/audit", "../services/WeatherService"], "external_methods": ["React", "render", "screen", "fireEvent", "App", "getAuditLog", "clearAuditLog", "WeatherService.isMockMode", "WeatherService.getCurrentWeatherByCity"], "published": [], "classes": [], "methods": [{"name": "beforeEach", "description": "Sets up mocks for WeatherService methods and clears audit log before each test."}, {"name": "afterEach", "description": "Restores all mocked functions after each test."}, {"name": "test('Audit trail entries include userId, ISO timestamp, action, outcome, and message/meta where available')", "description": "Validates that audit log entries contain expected properties and formats after a simulated weather fetch."}, {"name": "test('Validation control prevents empty or invalid input from invoking service')", "description": "Checks that validation prevents execution when input is empty or invalid, and no service call is made."}, {"name": "test('Access control placeholder check: UI renders without privileged actions (no RBAC)')", "description": "Ensures the UI does not display privileged controls, acting as a placeholder for access control tests."}], "calls": ["jest.spyOn(WeatherService, \"isMockMode\")", "jest.spyOn(WeatherService, \"getCurrentWeatherByCity\")", "clearAuditLog()", "jest.restoreAllMocks()", "render(<App />)", "screen.getByLabelText", "fireEvent.change", "fireEvent.click", "screen.findByLabelText", "getAuditLog()", "expect"], "search-terms": ["GxP", "audit log", "React testing", "frontend validation", "mockWeather", "COVID-19 compliance", "test suite", "UI validation", "access control placeholder"], "state": 2, "file_id": 28, "knowledge_revision": 62, "git_revision": "", "ctags": [{"_type": "tag", "name": "isoRegex", "path": "/home/kavia/workspace/code-generation/simple-weather-viewer-210065-210074/weather_app_frontend/src/__tests__/test_GxP_compliance.spec.js", "pattern": "/^const isoRegex = \\/^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z$\\/;$/", "language": "JavaScript", "kind": "constant"}], "hash": "50996e39535feed631d5d975e31b4b43", "format-version": 4, "code-base-name": "weather_app_frontend", "filename": "weather_app_frontend/src/__tests__/test_GxP_compliance.spec.js", "revision_history": [{"62": ""}]}